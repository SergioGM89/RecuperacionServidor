*****Ejercicio 1***** ProductosCrud.php

En la clase Database me faltó poner los atributos static y hacer el try-catch al intentar conectar con la BD.
Al declarar los atributos estáticos podré llamarlos sin instanciar la clase y al hacer el try-catch recogeré y 
podré manejar un posible error a la hora de conectar con la BD.

En la clase ProductosCrud:

-En todas las funciones debí utilizar bindValue como pide el ejercicio. Ahora he añadido la función rowCount() en 
los return de insertar, borrar y actualizar para que devuelva el número de filas afectadas, así nos aseguramos que se ha insertado en la BD.

-En el getProductos, me faltaba pasarle en fetchAll() el argumento PDO::FETCH_OBJ para que ordene el array como un objeto de la clase Producto.
También me faltaba la desconexión a la BD.

-En el getProducto, me faltaba pasarle en fetch() el argumento PDO::FETCH_ASSOC para que me devuelva un array asociativo.
También me faltó instanciar un producto, darle los valores que nos ha devuelto la consulta y devolver únicamente el producto instanciado.

-En insertar() y actualizar(), en el examen pasaba los datos del producto en variables y ahora paso el objeto producto,
de este modo, hago la llamada a los getters de la clase producto para trabajar con sus datos.


*****Ejercicio 2***** API_productos.php

En este ejercicio me quedé en blanco e intenté mostrar el resultado de manera manual.
Ahora he llamado a la función header y dependiendo de los parámatros pasados por GET llamo a la función de obtener producto por nombre objeto o 
insertar producto en la BD. He creado una función que lance un mensaje de error en caso de no introducir parámetros mediante GET. Y también he 
creado otra función que nos devuelve la URL correcta. Esta URL no coincide con la del ejercicio, ya que entiendo que querras probar el código y no 
apunta a ventas.es ni mi archivo se llama index.php. El resto cumple con lo que se pedía en el ejercicio.


*****Ejercicio 3***** Empleado.php, Secretario.php, Vendedor.php

En este ejercicio me faltaba: 

-Declarar la clase Empleado como abstracta.
-Hacer los require a Empleado.php en Vendedor y Secretario.
-Crear el atributo $despacho en la clase Secretario.
-La fórmula de calculaSalario() me calculaba el incremento de sueldo, ahora la he modificado para que me devuelva
el sueldo con el aumento (que es lo que entiendo que se pedía).


*****Ejercicio 4*****

El MVC se compone de:

- Vista: Es la encargada de mostrar los datos que recibe al usuario e interactuar con él.

- Modelo: Es quien se encarga de acceder a los datos (BBDD, archivos,...) y devolver las consultas o ejecutar las modificaciones de los datos.

- Controlador: Hace de intermediario entre el modelo y la vista. Recibe las peticiones de la vista, las adapta para solitarle los datos al modelo y
 cuando éste le manda la información, el controlador vuelve a adaptarla para enviarla a la vista (que la mostrará al usuario).


 
